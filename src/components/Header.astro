---
import Close from "./icons/close.astro";
import Code from "./icons/code.astro";
import Home from "./icons/home.astro";
import Menu from "./icons/menu.astro";
import Moon from "./icons/moon.astro";
import Photo from "./icons/photo.astro";
import Send from "./icons/send.astro";
import Sun from "./icons/sun.astro";
import User from "./icons/user.astro";

const LINKS = [
  {
    href: "#inicio",
    name: "Inicio",
    icon: Home,
  },
  {
    href: "#proyectos",
    name: "Proyectos",
    icon: Photo,
  },
  {
    href: "#sobre-mi",
    name: "Sobre m√≠",
    icon: User,
  },
  {
    href: "#contacto",
    name: "Contacto",
    icon: Send,
  },
];
---

<header
  class="fixed bottom-0 z-40 w-full tracking-wider sm:bottom-auto sm:top-0"
>
  <div
    class="bg-gradient-to-r from-primary-100 to-primary-400 font-semibold text-primary-900 dark:bg-primary-950 dark:bg-none dark:text-primary-300"
  >
    <nav
      id="nav"
      class="mx-auto flex items-center justify-between overflow-hidden px-3 py-1.5 sm:max-lg:container lg:max-w-3xl"
    >
      <a
        class="grid size-11 place-content-center"
        href="#inicio"
        aria-label="Inicio"
      >
        <Code class="size-8" />
      </a>

      <ul
        id="ul"
        class="fixed bottom-14 left-0 -z-10 grid w-full translate-y-full grid-cols-2 items-center justify-center bg-gradient-to-r p-3 transition-transform dark:bg-primary-950 dark:bg-none xs:grid-cols-3 sm:static sm:z-0 sm:flex sm:translate-y-0 sm:bg-none sm:p-0"
      >
        {
          LINKS.map((link) => (
            <li>
              <a
                href={link.href}
                aria-label={link.name}
                class="flex flex-col items-center gap-1 whitespace-nowrap rounded-full px-3 py-1 leading-4 hover:bg-primary-100/70 active:bg-primary-200/70 dark:hover:bg-primary-900/70 dark:active:bg-primary-800/70"
              >
                <link.icon class="size-6 sm:hidden" />
                {link.name}
              </a>
            </li>
          ))
        }
      </ul>

      <div class="flex">
        <button
          id="menu-toggle"
          type="button"
          title="Toggle menu"
          aria-label="Toggle menu"
          class="grid size-11 place-content-center rounded-full transition-colors active:text-primary-600 sm:hidden"
        >
          <Menu id="menu-toggle-menu-icon" class="size-6" />
          <Close id="menu-toggle-close-icon" class="hidden size-6" />
        </button>

        <button
          id="theme-toggle"
          type="button"
          title="Cambiar tema"
          aria-label="Cambiar tema"
          class="grid size-11 place-content-center rounded-full transition-colors hover:text-primary-900 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-primary-600 active:text-primary-600 dark:hover:text-primary-300 dark:active:text-primary-600"
        >
          <Sun id="theme-toggle-light-icon" class="hidden size-6" />
          <Moon id="theme-toggle-dark-icon" class="hidden size-6" />
        </button>
      </div>
    </nav>
  </div>
</header>

<script>
  // ==== TOGGLE MENU ====
  const menuToggle = document.getElementById("menu-toggle");
  const menuIcon = document.getElementById("menu-toggle-menu-icon");
  const closeIcon = document.getElementById("menu-toggle-close-icon");
  const ul = document.getElementById("ul");

  document.addEventListener("click", (e) => {
    const target = e.target as HTMLDivElement;
    if (
      target.id !== "ul" &&
      target.id !== "nav" &&
      target.closest("#menu-toggle") !== menuToggle
    ) {
      ul?.classList.add("translate-y-full");
      menuIcon?.classList.remove("hidden");
      closeIcon?.classList.add("hidden");
    }
  });

  menuToggle?.addEventListener("click", () => {
    menuIcon?.classList.toggle("hidden");
    closeIcon?.classList.toggle("hidden");
    ul?.classList.toggle("translate-y-full");
  });

  // ==== DARK MODE ====
  const themeToggle = document.getElementById("theme-toggle");
  const lightIcon = document.getElementById("theme-toggle-light-icon");
  const darkIcon = document.getElementById("theme-toggle-dark-icon");

  // On page load or when changing themes, best to add inline in `head` to avoid FOUC
  if (
    localStorage.getItem("color-theme") === "dark" ||
    (!("color-theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    document.documentElement.classList.add("dark");
    lightIcon?.classList.remove("hidden");
  } else {
    document.documentElement.classList.remove("dark");
    darkIcon?.classList.remove("hidden");
  }

  // On change system preferences theme
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (!("theme" in localStorage)) {
        if (e.matches) {
          document.documentElement.classList.add("dark");
          lightIcon?.classList.remove("hidden");
          darkIcon?.classList.add("hidden");
        } else {
          document.documentElement.classList.remove("dark");
          lightIcon?.classList.add("hidden");
          darkIcon?.classList.remove("hidden");
        }
      }
    });

  themeToggle?.addEventListener("click", () => {
    // toggle icons inside button
    darkIcon?.classList.toggle("hidden");
    lightIcon?.classList.toggle("hidden");

    // if set via local storage previously
    if (localStorage.getItem("color-theme")) {
      if (localStorage.getItem("color-theme") === "light") {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      }

      // if NOT set via local storage previously
    } else {
      if (document.documentElement.classList.contains("dark")) {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      } else {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      }
    }
  });

  // On page unload, erase local storage
  window.addEventListener("beforeunload", () =>
    localStorage.removeItem("color-theme"),
  );
</script>

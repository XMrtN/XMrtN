---
import Moon from "./icons/moon.astro";
import Sun from "./icons/sun.astro";

const LINKS = [
  {
    href: "#experiencia",
    name: "Experiencia",
  },
  {
    href: "#proyectos",
    name: "Proyectos",
  },
  {
    href: "#sobre-mi",
    name: "Sobre m√≠",
  },
];
---

<header class="fixed top-0 z-40 mt-2 flex w-full justify-center px-4">
  <nav
    class="flex flex-wrap items-center justify-center overflow-hidden rounded-full px-3 text-primary-600 dark:text-primary-600"
  >
    {
      LINKS.map((link, i) => (
        <a
          href={link.href}
          aria-label={link.name}
          class="whitespace-nowrap rounded-full p-2 text-sm font-medium transition-colors"
        >
          {link.name}
        </a>
      ))
    }

    <button
      id="theme-toggle"
      type="button"
      title="Cambiar tema"
      aria-label="Cambiar tema"
      class="place-content-center px-2 py-1.5 transition-colors focus-visible:outline-none active:text-primary-900 dark:active:text-primary-300"
    >
      <Sun id="theme-toggle-light-icon" class="hidden size-6" />
      <Moon id="theme-toggle-dark-icon" class="hidden size-6" />
    </button>
  </nav>
</header>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  :is(.dark nav) {
    animation-name: nav-shadown-dark;
  }

  @keyframes nav-shadown {
    to {
      @apply bg-gradient-to-r from-primary-100 to-primary-400 shadow-lg ring-1 ring-primary-600;
    }
  }

  @keyframes nav-shadown-dark {
    to {
      @apply bg-primary-950 shadow-lg ring-1 ring-primary-600;
    }
  }
</style>

<script>
  // ==== SCROLL SPY ====
  const links = document.querySelectorAll("header nav a");

  window.addEventListener("scroll", () => {
    let sectionVisible = false;

    links.forEach((a) => {
      const sectionElement: HTMLDivElement | null = document.querySelector(
        `section${a.getAttribute("href")}`,
      );

      if (!sectionElement) return;

      if (
        window.scrollY >= sectionElement.offsetTop - 160 &&
        window.scrollY <
          sectionElement.offsetTop - 160 + sectionElement.offsetHeight
      ) {
        sectionVisible = true;
        links.forEach((link) => {
          link.classList.remove("text-primary-900", "dark:text-primary-300");
        });
        a.classList.add("text-primary-900", "dark:text-primary-300");
      }
    });

    if (!sectionVisible) {
      links.forEach((link) => {
        link.classList.remove("text-primary-900", "dark:text-primary-300");
      });
    }
  });
</script>

<script>
  // ==== DARK MODE ====
  const themeToggle = document.getElementById("theme-toggle");
  const lightIcon = document.getElementById("theme-toggle-light-icon");
  const darkIcon = document.getElementById("theme-toggle-dark-icon");

  // On page load or when changing themes, best to add inline in `head` to avoid FOUC
  if (
    localStorage.getItem("color-theme") === "dark" ||
    (!("color-theme" in localStorage) &&
      window.matchMedia("(prefers-color-scheme: dark)").matches)
  ) {
    document.documentElement.classList.add("dark");
    lightIcon?.classList.remove("hidden");
  } else {
    document.documentElement.classList.remove("dark");
    darkIcon?.classList.remove("hidden");
  }

  // On change system preferences theme
  window
    .matchMedia("(prefers-color-scheme: dark)")
    .addEventListener("change", (e) => {
      if (!("theme" in localStorage)) {
        if (e.matches) {
          document.documentElement.classList.add("dark");
          lightIcon?.classList.remove("hidden");
          darkIcon?.classList.add("hidden");
        } else {
          document.documentElement.classList.remove("dark");
          lightIcon?.classList.add("hidden");
          darkIcon?.classList.remove("hidden");
        }
      }
    });

  themeToggle?.addEventListener("click", () => {
    // toggle icons inside button
    darkIcon?.classList.toggle("hidden");
    lightIcon?.classList.toggle("hidden");

    // if set via local storage previously
    if (localStorage.getItem("color-theme")) {
      if (localStorage.getItem("color-theme") === "light") {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      } else {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      }

      // if NOT set via local storage previously
    } else {
      if (document.documentElement.classList.contains("dark")) {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("color-theme", "light");
      } else {
        document.documentElement.classList.add("dark");
        localStorage.setItem("color-theme", "dark");
      }
    }
  });

  // On page unload, erase local storage
  window.addEventListener("beforeunload", () =>
    localStorage.removeItem("color-theme"),
  );
</script>
